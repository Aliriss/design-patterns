
/**
 * 外观模式：<br/>
 * 好处：<ol>
 *     <li>降低子系统与客户端之间的耦合度，是的子系统的变化不会影响调用他的客户类</li>
 *     <li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易</li>
 * </ol>
 * 缺点：<ol>
 *     <li>不符合开闭原则，修改很麻烦(子系统修改了，可能也需要修改外观类)</li>
 * </ol>
 * 使用场景：<ol>
 *     <li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系</li>
 *     <li>当一个复杂系统的子系统很多时，外观模式可以为设计一个简单的接口供外界访问</li>
 *     <li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将他们分离，从而提高子系统的独立性和可移植性</li>
 * </ol>
 * @author all
 * @since 2023/7/20 22:49
 */
package construct.facade;

