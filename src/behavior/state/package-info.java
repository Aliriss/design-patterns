/**
 * 状态模式：<br/>
 * 结构：<ol>
 *     <li>环境角色（Context)：也称上下文，定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委派给当前状态对象来处理</li>
 *     <li>抽象状态角色（State）：一个接口，用以封装环境对象中的特定状态所对应的行为</li>
 *     <li>具体状态角色（Concrete State）：实现抽象状态所对应的行为</li>
 * </ol>
 * 优点：<ol>
 *     <li>将所有与某个状态有关的行为放到一个类中，并且可以方便的增加新的状态，只要改变对象状态即可改变对象的行为</li>
 *     <li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的添加语句块</li>
 * </ol>
 * 缺点：<ol>
 *     <li>增加系统类和对象的个数</li>
 *     <li>结构和实现较为复杂，使用不当将导致结构和代码复杂</li>
 *     <li>对开闭模式的支持不是很友好</li>
 * </ol>
 * 使用场景：<ol>
 *     <li>当一个对象的行为取决于他的状态，并且必须在运行时根据状态改变他的行为</li>
 *     <li>一个操作中含有庞大的分支结构，并且这些分支取决于对象的状态时</li>
 * </ol>
 *
 * @author all
 * @since 2023/7/29 2:09
 */
package behavior.state;
