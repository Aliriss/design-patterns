/**
 * 责任链模式：<br/>
 * 优点：<ol>
 *     <li>降低了对象之间的耦合度，发送者和请求者</li>
 *     <li>增强了系统之间的可扩展性：可根据需要增加新的请求处理类，满足开闭原则</li>
 *     <li>增强给对象指派责任的灵活性：当工作流程发生变化，可以动态的改变链内的成员，或者修改他们的次序，也可动态的新增或删除责任</li>
 *     <li>简化对象之间的连接：一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，避免了使用众多的if语句</li>
 *     <li>责任分担：每个类只需处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则</li>
 * </ol>
 * 缺点：<ol>
 *     <li>不能保证每一个请求一定被处理，由于一个请求没有明确的接收者，所以不能保证它一定被处理，有可能一致传递到末端都得不到处理。</li>
 *     <li>对比较长的责任链，请求的处理可能涉及多个处理对象，系统性能受到一定影响</li>
 *     <li>责任链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于责任链的错误设置而导致系统出错，比如循环调用</li>
 * </ol>
 * @author all
 * @since 2023/7/27 15:13
 */
package behavior.responsibility;
