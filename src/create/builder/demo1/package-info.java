
/**
 * 建造者模式<br/>
 * 优缺点：<br/>
 * 优点：<ol>
 * <li> 建造者模式的封装性很好，使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性</li>
 * <li> 在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>
 * <li> 可以更加精细的控制产品的创建过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序控制创建过程。</li>
 * <li> 建造者模式很容易进行扩展，如果有新的需求，通过实现一个新的建造者类就能完成，基本上不用修改之前已经测试过的代码，也就不会对原有功能引入风险，符合开闭原则。</li>
 * </ol>
 * 缺点：<ol>
 * <li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间差异性很大，则不符合使用建造者模式，因此其适用范围受到一定限制。</li>
 * </ol>
 * 使用场景<br/>
 * <ol>
 *     <li>创建的对象较为复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是相对稳定的</li>
 *     <li>创建复杂对象的算法独立于该对象的组成部分以及他们的装配方式，即产品的构建过程和最终的表示是独立的</li>
 * </ol>
 * 模式扩展<br/>
 * <p>当一个类构造器需要传入很多参数时，如果要创建这个类的实例，代码可读性会非常差，而且容易引入错误，此时可以用创建者模式进行重构。</p>
 *
 * @author all
 * @since 2023/7/18 15:49
 */
package create.builder.demo1;


